{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Coding Blog","text":"<p>Hi! I\u2019m Josh. Here you\u2019ll find short write\u2010ups on why I built each tool, what problems they solve, and how they work. Below are my latest posts:</p> <ul> <li>How I Built My ASCII\u2010to\u2010Bitmap Converter</li> <li>You Pick the bits, I hide the file</li> </ul> <p>\u2014 More posts to come! \u2014</p>"},{"location":"posts/any-bits-you-want-stego/","title":"You pick the bits, I hide the file","text":"<p>Date: 2025\u201005\u201014</p> <p>Problem While playing around with some steganography scripts, I found myself wanting to see things like how many bits I needed to change before the change was apparent. I also wanted to see how much stuff I could put in an image if we discard the idea of it being noticable. I put the whole text of \"Moby Dick\" in a screenshot. I wanted to see what it would look like to use the most significant bits instead of the least, it was a funny thought that some programmer could get his right and left mixed up.</p> <p>Solution </p> <p>Thanks    \u2014 Josh</p>"},{"location":"posts/ascii-to-bitmap/","title":"How I Built My ASCII\u2010to\u2010Bitmapped\u2010Font Converter","text":"<p>Date: 2025\u201005\u201007</p> <p>Problem I frequently need a quick way to see a hexadecimal representation of a 1\u2010bit image, especially when experimenting with bit\u2010level steganography. Manually converting ASCII to a 5\u00d77 or 8\u00d78 dot matrix in hex was tedious.</p> <p>Solution I wrote a Python script that: 1. Takes any ASCII string,  2. Uses a custom 5\u00d77 bitmapped font, 3. Renders each character into a binary matrix, 4. Concatenates rows into bytes, and 5. Outputs a hex string (or Base64) that can be embedded in web demos.</p> <pre><code># Example snippet from `hex_string_to_bit_matrix`\ndef hex_string_to_bit_matrix(hex_string: str) -&gt; list[list[str]]:\n    bytes_data = bytes.fromhex(hex_string)\n    bit_matrix = []\n    for byte in bytes_data:\n        bits = list(f\"{byte:08b}\")\n        bit_matrix.append(bits)\n    return bit_matrix\n</code></pre>"},{"location":"posts/ascii-to-bitmap/#result","title":"Result","text":"<ul> <li>This is a custom bitmap font representation of the input text.</li> <li>Use this to create/decode messages for CTF like chanllenges.</li> <li>You can set the output to base64 if that is more convienient.</li> <li>Full source is on GitHub.</li> </ul> <p>Thanks    \u2014 Josh</p>"}]}